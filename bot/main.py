import asyncio
import os
from os.path import dirname, join

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart, or_f
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from dotenv import load_dotenv
import requests

from model import analyze_profile
from database import (
    create_user,
    get_balance,
    get_balance_by_uniq_code,
    increase_balance,
    link_user_to_balance,
    create_uniq_code,
    get_uniq_code,
    decrerase_balance,
)
from utils import validate_url

dotenv_path = join(dirname(__file__), ".env")
load_dotenv(dotenv_path)

TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=TOKEN)

dp = Dispatcher()


# Command '/start'
async def command_start_handler(message: Message):
    create_user(message.from_user.id)
    await message.answer(
        f"""–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!
LinkLens - —ç—Ç–æ –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è HR –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –ø—Ä–æ—Ñ–∏–ª—è —á–µ–ª–æ–≤–µ–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö, –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –Ω–∞ –±–∞–∑–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞. –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è, –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ VK""",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text="–ö—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω—ã üí∏"),
                    KeyboardButton(text="–ë–∞–ª–∞–Ω—Å üí∞"),
                ],
                [
                    KeyboardButton(text="–ü—Ä–∏—Å–ª–∞—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ üôà"),
                    KeyboardButton(text="–ú–æ–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥"),
                ],
            ],
            resize_keyboard=True,
        ),
    )


@dp.message(Command("help"))
async def command_help(message: Message):
    await message.answer(
        "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–º–∞–Ω–¥: /start - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞\n/help - –≤—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã\n/analyze - –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n/balance - –≤—ã–≤–µ—Å—Ç–∏ —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å\nget_code - –ø–æ–ª—É—á–∏—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥\n\
            /send_code - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥"
    )


@dp.message(or_f(Command("send_code"), F.text == "–ü—Ä–∏—Å–ª–∞—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ üôà"))
async def command_send_code(message: Message):
    if len(message.text.split()) < 2:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥")
    else:
        command_parts = message.text.split()
        attribute = command_parts[1]
        balance = get_balance_by_uniq_code(attribute)
        if balance:
            link_user_to_balance(message.from_user.id, balance.id)
            await message.answer("–¢—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É")
        else:
            await message.answer(
                f"–ü–æ—Ö–æ–∂–µ, —á—Ç–æ –∫–æ–¥ {attribute} –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ /send_code –∏–ª–∏ –∫—É–ø–∏ —Ç–æ–∫–µ–Ω—ã —á–µ—Ä–µ–∑ /tokens"
            )


# Command '/get_code'
@dp.message(or_f(Command("get_code"), F.text == "–ú–æ–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥"))
async def command_create_code(message: Message):
    user = message.from_user
    create_uniq_code(user.id)
    uniq_code = get_uniq_code(user.id)
    await message.answer(f"–¢–≤–æ–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥: {uniq_code}")


# Command '/tokens'
@dp.message(or_f(Command("tokens"), F.text == "–ö—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω—ã üí∏"))
async def command_tokens_handler(message: Message):
    is_owner = get_balance(message.from_user.id).owner_id == str(message.from_user.id)
    if is_owner:
        await message.answer(
            "–í—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—á–µ—à—å –∫—É–ø–∏—Ç—å",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="10 —Ç–æ–∫–µ–Ω–æ–≤", callback_data="10_tokens"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="50 —Ç–æ–∫–µ–Ω–æ–≤", callback_data="50_tokens"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="100 —Ç–æ–∫–µ–Ω–æ–≤", callback_data="100_tokens"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="1000 —Ç–æ–∫–µ–Ω–æ–≤", callback_data="1000_tokens"
                        )
                    ],
                ]
            ),
        )
    else:
        await message.answer("–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–¥–∞ –º–æ–∂–µ—Ç –ø–æ–∫—É–ø–∞—Ç—å —Ç–æ–∫–µ–Ω—ã")


# Callback for buttons '{}_tokens" in command '/tokens'
async def update_balance_and_notify(callback_query: CallbackQuery, amount: int):
    increase_balance(callback_query.from_user.id, amount)

    await callback_query.message.answer(
        f"–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} —Ç–æ–∫–µ–Ω–æ–≤, –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö —á–µ—Ä–µ–∑ /analyze"
    )


async def tokens_callback_handler(callback_query: CallbackQuery):
    token_amounts = {
        "10_tokens": 10,
        "50_tokens": 50,
        "100_tokens": 100,
        "1000_tokens": 1000,
    }

    amount = token_amounts.get(callback_query.data)
    if amount:
        await update_balance_and_notify(callback_query, amount)


# Command '/balance'
@dp.message(or_f(Command("balance"), F.text == "–ë–∞–ª–∞–Ω—Å üí∞"))
async def command_balance(message: Message):
    user_balance = get_balance(message.from_user.id)
    await message.answer(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance.amount}")


# vk profile link handler
@dp.message(F.text.regexp("https://vk\.com/[A-Za-z0-9]+"))
async def vk_profile_link_hanldler(message: Message):
    text = message.text
    user = message.from_user
    if get_balance(user.id).amount > 0:
        try:
            if validate_url(text):
                await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å, –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ")
                print(text)
                response = requests.post(
                    "http://parser:8000/parse", json={"link": text}
                )
                response.raise_for_status()
                analyze = analyze_profile(response.json()["result"])
                if analyze == "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ":
                    await message.answer(
                        "–ú—ã –Ω–µ –Ω–∞—à–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ñ–∏–ª–µ, –∑–∞ —Ç–∞–∫—É—é –ø–æ–ø—ã—Ç–∫—É —Ç–æ–∫–µ–Ω –Ω–µ –±—ã–ª —Å–ø–∏—Å–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É"
                    )
                else:
                    await message.answer(analyze)
                    decrerase_balance(user.id)
                    await message.answer("–ì–æ—Ç–æ–≤–æ! –° –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—Å–∞–Ω 1 —Ç–æ–∫–µ–Ω")

            else:
                await message.answer("–ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å VK")
        except Exception as e:
            print(e)
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
    else:
        await message.answer(
            "–£–ø—Å, –∫–∞–∂–µ—Ç—Å—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤. –ü–æ–ø–æ–ª–Ω–∏ –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ /tokens"
        )


def register_handlers(dp: Dispatcher):
    dp.message.register(command_start_handler, CommandStart())
    dp.callback_query.register(
        tokens_callback_handler,
        lambda c: c.data in ["10_tokens", "50_tokens", "100_tokens", "1000_tokens"],
    )


async def main():
    register_handlers(dp)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
