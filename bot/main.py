import asyncio
import os
from datetime import date
from os.path import dirname, join

import aiohttp
import utils.keyboards as keyboards
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart, or_f
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message
from database.database import Database
from dotenv import load_dotenv
from model import analyze_profile
from utils.utils import translate_month_in_str

dotenv_path = join(dirname(__file__), ".env")
load_dotenv(dotenv_path)
TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=TOKEN)

dp = Dispatcher()

db = Database()


class Start_Form(StatesGroup):
    choice = State()


# Command '/start'
async def command_start_handler(message: Message, state: FSMContext):
    await state.set_state(Start_Form.choice)
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã")
    await message.answer(
        "–Ø ‚Äî LinkLens, –≤–∞—à —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ HR, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —á–µ–ª–æ–≤–µ–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö. –ò—Å–ø–æ–ª—å–∑—É—è –ø–µ—Ä–µ–¥–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, —è –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n"
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω", reply_markup=keyboards.choose_plan)


@dp.message(Start_Form.choice)
async def choice_handler(message: Message, state: FSMContext):
    await state.clear()
    if message.text == "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π":
        await db.create_user(
            message.from_user.id,
            username=message.from_user.username,
            full_name=message.from_user.full_name,
            plan="person",
        )
        await message.answer(
            "–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–ª–∞–Ω –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π.", reply_markup=keyboards.person
        )
        await message.answer(
            "–ö—É–ø–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.",
            reply_markup=keyboards.choose_tokens,
        )
    elif message.text == "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π":
        await db.create_user(
            message.from_user.id,
            username=message.from_user.username,
            full_name=message.from_user.full_name,
            plan="corporation",
        )
        await message.answer(
            "–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–ª–∞–Ω –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π.", reply_markup=keyboards.corporation
        )
        await message.answer(
            "–ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.",
            reply_markup=keyboards.subs,
        )
    else:
        await state.set_state(Start_Form.choice)


@dp.message(Command("help"))
async def command_help(message: Message):
    await message.answer(
        "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–º–∞–Ω–¥: /start - –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞\n/analyze - –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n/balance - –í—ã–≤–µ—Å—Ç–∏ —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å\n/tokens - –ö—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω—ã\n/sub - –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\nget_code - –ü–æ–ª—É—á–∏—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥\n/send_code - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥\n/help - –í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã"
    )


class Form(StatesGroup):
    code = State()


# Command '/send_code'
@dp.message(or_f(Command("send_code"), F.text == "–ü—Ä–∏—Å–ª–∞—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ üôà"))
async def command_send_code(message: Message, state: FSMContext):
    user = await db.get_user(user_id=message.from_user.id)
    if user.plan == "corporation":
        await state.set_state(Form.code)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥")
    else:
        await message.answer("–ù–∞ –≤–∞—à–µ–º –ø–ª–∞–Ω–µ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞")


@dp.message(Form.code)
async def process_code(message: Message, state: FSMContext):
    balance = await db.get_balance_by_uniq_code(message.text)
    if balance:
        await db.link_user_to_balance(message.from_user.id, balance.id)
        await message.answer("–¢—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É")
    else:
        await message.answer(
            f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–æ–¥ {message.text} –æ–∫–∞–∑–∞–ª—Å—è –Ω–µ–≤–µ—Ä–Ω—ã–º. üòï –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /send_code –∏–ª–∏ –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã —á–µ—Ä–µ–∑ /tokens. üõí"
        )
    await state.clear()


# Command '/get_code'
@dp.message(or_f(Command("get_code"), F.text == "–ú–æ–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥"))
async def command_create_code(message: Message):
    user = await db.get_user(user_id=message.from_user.id)
    if user.plan == "corporation":
        user = message.from_user
        await db.create_uniq_code(user.id)
        uniq_code = await db.get_uniq_code(user.id)
        await message.answer(f"–¢–≤–æ–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥: {uniq_code}")
    else:
        await message.answer("–ù–∞ –≤–∞—à–µ–º –ø–ª–∞–Ω–µ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞")


# Command '/tokens'
@dp.message(or_f(Command("tokens"), F.text == "–ö—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω—ã üí∏"))
async def command_tokens_handler(message: Message):
    user = await db.get_user(user_id=message.from_user.id)
    if user.plan == "person":
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏.",
            reply_markup=keyboards.choose_tokens,
        )
    else:
        await message.answer("–ù–∞ –≤–∞—à–µ–º –ø–ª–∞–Ω–µ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞")


async def tokens_callback_handler(callback_query: CallbackQuery):
    callback_data = {
        "10_tokens": 10,
        "50_tokens": 50,
        "100_tokens": 100,
        "1000_tokens": 1000,
    }

    amount = callback_data.get(callback_query.data)
    await update_balance_and_notify(callback_query, amount)


# Callback for buttons '{}_tokens" in command '/tokens'
async def update_balance_and_notify(callback_query: CallbackQuery, amount: int):
    await db.increase_balance(callback_query.from_user.id, amount)

    await callback_query.message.answer(
        f"–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} —Ç–æ–∫–µ–Ω–æ–≤! üéâ"
    )
    await callback_query.message.answer(
        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö, –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Å—å –∫–æ–º–∞–Ω–¥–æ–π /analyze, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å VK. üîç"
    )


# Command /sub
@dp.message(or_f(Command("sub"), F.text == "–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É ‚úÖ"))
async def command_sub_handler(message: Message):
    user = await db.get_user(user_id=message.from_user.id)
    if user.plan == "corporation":
        balance = await db.get_balance(user_id=message.from_user.id)
        if balance.owner_id == message.from_user.id:
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏.",
                reply_markup=keyboards.subs,
            )
        else:
            await message.answer(
                "–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–¥–∞ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –ø–æ–∫—É–ø–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. üîê"
            )
    else:
        await message.answer("–ù–∞ –≤–∞—à–µ–º –ø–ª–∞–Ω–µ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞")


async def sub_callback_handler(callback_query: CallbackQuery):
    callback_data = {"1_month": (1, "m"), "3_month": (3, "m"), "1_year": (1, "y")}

    amount = callback_data.get(callback_query.data)
    await subscribe_and_notify(callback_query, amount[0], amount[1])


async def subscribe_and_notify(callback_query: CallbackQuery, amount: int, unit: str):
    balance = await db.get_balance(user_id=callback_query.from_user.id)
    subscription_date = balance.subscription_end
    if subscription_date and subscription_date >= date.today():
        date_formatted = translate_month_in_str(subscription_date)
        await callback_query.message.answer(
            f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞. –û–Ω–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {date_formatted}"
        )
    else:
        await db.subscribe(callback_query.from_user.id, amount, unit)
        await callback_query.message.answer(
            f'–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å VK, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ê–Ω–∞–ª–∏–∑ üîé"'
        )


# Command '/balance'
@dp.message(
    or_f(Command("balance"), F.text == "–ë–∞–ª–∞–Ω—Å üí∞", F.text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É üí∞")
)
async def command_balance(message: Message):
    user_balance = await db.get_balance(user_id=message.from_user.id)
    subscription_date = user_balance.subscription_end
    if subscription_date and subscription_date >= date.today():
        date_formatted = translate_month_in_str(subscription_date)
        await message.answer(f"–£ –≤–∞—Å –¥–µ–π—Å—Ç–≤—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ {date_formatted}")
    else:
        await message.answer(f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user_balance.amount} —Ç–æ–∫–µ–Ω–æ–≤.")


# vk profile link handler
@dp.message(F.text.regexp(r"https://vk\.com/[A-Za-z0-9]+"))
async def vk_profile_link_hanldler(message: Message):
    text = message.text
    user = message.from_user
    balance = await db.get_balance(user_id=user.id)
    if balance.amount > 0 or (
        balance.subscription_end and balance.subscription_end >= date.today()
    ):
        try:
            await message.answer(
                "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ... ‚è≥"
            )
            async with aiohttp.ClientSession() as session:
                response = await session.post(
                    url="http://parser:8000/parse", json={"link": text}
                )
            response.raise_for_status()
            json = await response.json()
            analyze = await analyze_profile(json["result"])
            if analyze == "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.":
                await message.answer(
                    "–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ñ–∏–ª–µ. üòï \n–ù–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å, —Ç–æ–∫–µ–Ω –∑–∞ —ç—Ç—É –ø–æ–ø—ã—Ç–∫—É –Ω–µ –±—ã–ª —Å–ø–∏—Å–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É. üîó"
                )
            else:
                await message.answer(analyze)
                await db.decrease_balance(user.id)
                await message.answer(
                    "–ì–æ—Ç–æ–≤–æ! –° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —É—Å–ø–µ—à–Ω–æ —Å–ø–∏—Å–∞–Ω 1 —Ç–æ–∫–µ–Ω. ‚úÖ"
                )

        except Exception as e:
            print(e)
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏. üòü\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
            )
    else:
        await message.answer(
            "–£–ø—Å! –ö–∞–∂–µ—Ç—Å—è, —É –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤. üòÖ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /tokens."
        )


class Analyze_Form(StatesGroup):
    link = State()


@dp.message(Command("cancel"))
async def cancel_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()

    if current_state is None:
        return

    await state.clear()
    await message.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ")


@dp.message(or_f(Command("analyze"), F.text == "–ê–Ω–∞–ª–∏–∑ üîé"))
async def anaylyze_handler(message: Message, state: FSMContext):
    await state.set_state(Analyze_Form.link)
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å VK. üîó")


@dp.message(Analyze_Form.link)
async def process_link(message: Message, state: FSMContext):
    if message.text.startswith("https://vk.com/"):
        await state.clear()
        await vk_profile_link_hanldler(message)
    else:
        await state.set_state(Analyze_Form.link)
        await message.answer("–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å VK. üòü")
        await message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, –ª–∏–±–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel")


@dp.message(or_f(Command("users"), F.text == "–ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ üë§"))
async def users_handler(message: Message):
    user = await db.get_user(user_id=message.from_user.id)
    if user.plan == "corporation":
        user_id = message.from_user.id

        balance = await db.get_balance(user_id=user_id)
        if not balance:
            await message.answer("–ë–∞–ª–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        users = await db.get_users_by_balance(balance_id=balance.id)
        users = [user for user in users if user.id != user_id]

        if not users:
            await message.answer(
                "–ù–µ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫ –≤–∞—à–µ–º—É –±–∞–ª–∞–Ω—Å—É."
            )
            return

        keyboard = await keyboards.users(users)

        await message.answer(
            "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –≤–∞—à–µ–º—É –±–∞–ª–∞–Ω—Å—É\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞",
            reply_markup=keyboard,
        )
    else:
        await message.answer("–ù–∞ –≤–∞—à–µ–º –ø–ª–∞–Ω–µ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞")


async def users_callback_handler(callback_query: CallbackQuery):
    user_id_to_delete = callback_query.data[len("delete_") :]
    balance = await db.get_balance(user_id=callback_query.from_user.id)

    if balance.owner_id == callback_query.from_user.id:
        try:
            await db.unlink_user_from_balance(int(user_id_to_delete))
            await callback_query.message.answer(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id_to_delete} —É–¥–∞–ª–µ–Ω —Å –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞."
            )
        except Exception as e:
            print(e)
            await callback_query.message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            )

    else:
        await callback_query.message.answer(
            "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫ —á—É–∂–æ–º—É –±–∞–ª–∞–Ω—Å—É."
        )


def register_handlers(dp: Dispatcher):
    dp.message.register(command_start_handler, CommandStart())
    dp.callback_query.register(
        tokens_callback_handler,
        lambda c: c.data in ["10_tokens", "50_tokens", "100_tokens", "1000_tokens"],
    )
    dp.callback_query.register(
        sub_callback_handler, lambda c: c.data in ["1_month", "3_month", "1_year"]
    )
    dp.callback_query.register(
        users_callback_handler, lambda c: c.data.startswith("delete_")
    )


async def main():
    await db.create_metadata()
    register_handlers(dp)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
